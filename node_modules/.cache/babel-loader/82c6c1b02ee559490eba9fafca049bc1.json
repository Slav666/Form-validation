{"ast":null,"code":"var _jsxFileName = \"/home/slawek/Desktop/REACT-Maximilian/working-with-forms-and-user-input/01-starting-project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnterNameIsValid] = useState(false);\n  const [enterNameIsTouched, setEnterNameIsTouched] = useState(false);\n  const nameInputIsInvalid = !enteredNameIsValid && enterNameIsTouched;\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"Name input is valid\");\n    }\n  }, [enteredNameIsValid]);\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n\n  const enterNameHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = () => {\n    set;\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // this if statement is to check that function will be stopped if empty string is submitted\n\n    setEnterNameIsTouched(true);\n\n    if (enteredName === \"\") {\n      setEnterNameIsValid(false);\n      return;\n    }\n\n    setEnterNameIsValid(true);\n    console.log(\"Entered Name\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    setEnteredName(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: enterNameHandler,\n        onBlur: nameInputBlurHandler,\n        ref: nameInputRef,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Entered Name is not valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"tKmqye5WBzh4uwQaOUsK2FR7gkg=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/slawek/Desktop/REACT-Maximilian/working-with-forms-and-user-input/01-starting-project/src/components/SimpleInput.js"],"names":["React","useState","useRef","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnterNameIsValid","enterNameIsTouched","setEnterNameIsTouched","nameInputIsInvalid","console","log","nameInputClasses","enterNameHandler","event","target","value","nameInputBlurHandler","set","formSubmissionHandler","preventDefault","enteredValue","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGJ,MAAM,EAA3B;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,kBAAD,EAAqBC,mBAArB,IAA4CT,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,KAAD,CAA5D;AAEA,QAAMY,kBAAkB,GAAG,CAACJ,kBAAD,IAAuBE,kBAAlD;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,kBAAJ,EAAwB;AACtBK,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF,GAJQ,EAIN,CAACN,kBAAD,CAJM,CAAT;AAMA,QAAMO,gBAAgB,GAAGH,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;;AAIA,QAAMI,gBAAgB,GAAIC,KAAD,IAAW;AAClCV,IAAAA,cAAc,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,oBAAoB,GAAG,MAAM;AACrCC,IAAAA,GAAG;AACA,GAFD;;AAIA,QAAMC,qBAAqB,GAAIL,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACM,cAAN,GADuC,CAEvC;;AACAZ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,WAAW,KAAK,EAApB,EAAwB;AACtBG,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA;AACD;;AACDA,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BR,WAA5B;AACA,UAAMkB,YAAY,GAAGnB,YAAY,CAACoB,OAAb,CAAqBN,KAA1C;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYU,YAAZ;AACAjB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAbD;;AAcA,sBACE;AAAM,IAAA,QAAQ,EAAEe,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEP,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEC,gBAHZ;AAIE,QAAA,MAAM,EAAEI,oBAJV;AAKE,QAAA,GAAG,EAAEf,YALP;AAME,QAAA,KAAK,EAAEC;AANT;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGM,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA7DD;;GAAMT,W;;KAAAA,W;AA+DN,eAAeA,WAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnterNameIsValid] = useState(false);\n  const [enterNameIsTouched, setEnterNameIsTouched] = useState(false);\n\n  const nameInputIsInvalid = !enteredNameIsValid && enterNameIsTouched;\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"Name input is valid\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const enterNameHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = () => {\nset\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    // this if statement is to check that function will be stopped if empty string is submitted\n    setEnterNameIsTouched(true);\n    if (enteredName === \"\") {\n      setEnterNameIsValid(false);\n      return;\n    }\n    setEnterNameIsValid(true);\n    console.log(\"Entered Name\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    setEnteredName(\"\");\n  };\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={enterNameHandler}\n          onBlur={nameInputBlurHandler}\n          ref={nameInputRef}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Entered Name is not valid</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}